{
  "data": {
    "__schema": {
      "queryType": {
        "name": "QueryType"
      },
      "types": [
        {
          "kind": "OBJECT",
          "name": "QueryType",
          "fields": [
            {
              "name": "trip",
              "description": "Input type for executing a travel search for a trip between two locations. Returns trip patterns describing suggested alternatives for the trip.",
              "args": [
                {
                  "name": "dateTime",
                  "description": "Date and time for the earliest time the user is willing to start the journey (if arriveBy=false/not set) or the latest acceptable time of arriving (arriveBy=true). Defaults to now",
                  "type": {
                    "kind": "SCALAR",
                    "name": "DateTime"
                  }
                },
                {
                  "name": "searchWindow",
                  "description": "The length of the search-window in minutes. This is normally dynamically calculated by the server, but you may override this by setting it. The search-window used in a request is returned in the response metadata. To get the \"next page\" of trips use the metadata(searchWindowUsed and nextWindowDateTime) to create a new request. If not provided the value is resolved depending on the other input parameters, available transit options and realtime changes.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  }
                },
                {
                  "name": "from",
                  "description": "The start location",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "INPUT_OBJECT",
                      "name": "Location"
                    }
                  }
                },
                {
                  "name": "to",
                  "description": "The end location",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "INPUT_OBJECT",
                      "name": "Location"
                    }
                  }
                },
                {
                  "name": "wheelchair",
                  "description": "Whether the trip must be wheelchair accessible.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "numTripPatterns",
                  "description": "The maximum number of trip patterns to return.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "3"
                },
                {
                  "name": "maximumWalkDistance",
                  "description": "DEPRECATED - Use maxPreTransitWalkDistance/maxTransferWalkDistance instead. The maximum distance (in meters) the user is willing to walk. Note that trip patterns with longer walking distances will be penalized, but not altogether disallowed. Maximum allowed value is 15000 m",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  },
                  "defaultValue": "5000.0"
                },
                {
                  "name": "maxTransferWalkDistance",
                  "description": "The maximum walk distance allowed for transfers.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  },
                  "defaultValue": "2000.0"
                },
                {
                  "name": "walkSpeed",
                  "description": "The maximum walk speed along streets, in meters per second",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  },
                  "defaultValue": "1.3"
                },
                {
                  "name": "bikeSpeed",
                  "description": "The maximum bike speed along streets, in meters per second",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  },
                  "defaultValue": "5.0"
                },
                {
                  "name": "optimisationMethod",
                  "description": "The set of characteristics that the user wants to optimise for -- defaults to quick",
                  "type": {
                    "kind": "ENUM",
                    "name": "OptimisationMethod"
                  },
                  "defaultValue": "quick"
                },
                {
                  "name": "arriveBy",
                  "description": "Whether the trip should depart at dateTime (false, the default), or arrive at dateTime.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "vias",
                  "description": "An ordered list of intermediate locations to be visited.",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "INPUT_OBJECT",
                      "name": "Location"
                    }
                  }
                },
                {
                  "name": "preferred",
                  "description": "Parameters for indicating authorities or lines that preferably should be used in trip patters. A cost is applied to boarding nonpreferred authorities or lines (otherThanPreferredRoutesPenalty).",
                  "type": {
                    "kind": "INPUT_OBJECT",
                    "name": "InputPreferred"
                  }
                },
                {
                  "name": "unpreferred",
                  "description": "Parameters for indicating authorities or lines that preferably should not be used in trip patters. A cost is applied to boarding nonpreferred authorities or lines (otherThanPreferredRoutesPenalty).",
                  "type": {
                    "kind": "INPUT_OBJECT",
                    "name": "InputUnpreferred"
                  }
                },
                {
                  "name": "banned",
                  "description": "Parameters for indicating authorities, lines or quays not be used in the trip patterns",
                  "type": {
                    "kind": "INPUT_OBJECT",
                    "name": "InputBanned"
                  }
                },
                {
                  "name": "whiteListed",
                  "description": "Parameters for indicating the only authorities, lines or quays to be used in the trip patterns",
                  "type": {
                    "kind": "INPUT_OBJECT",
                    "name": "InputWhiteListed"
                  }
                },
                {
                  "name": "transferPenalty",
                  "description": "An extra penalty added on transfers (i.e. all boardings except the first one). The transferPenalty is used when a user requests even less transfers. In the latter case, we don't actually optimise for fewest transfers, as this can lead to absurd results. Consider a trip in New York from Grand Army Plaza (the one in Brooklyn) to Kalustyan's at noon. The true lowest transfers trip pattern is to wait until midnight, when the 4 train runs local the whole way. The actual fastest trip pattern is the 2/3 to the 4/5 at Nevins to the 6 at Union Square, which takes half an hour. Even someone optimise for fewest transfers doesn't want to wait until midnight. Maybe they would be willing to walk to 7th Ave and take the Q to Union Square, then transfer to the 6. If this takes less than transferPenalty seconds, then that's what we'll return.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "0"
                },
                {
                  "name": "modes",
                  "description": "The set of access/egress/direct/transit modes to be used for this search.",
                  "type": {
                    "kind": "INPUT_OBJECT",
                    "name": "Modes"
                  }
                },
                {
                  "name": "transportSubmodes",
                  "description": "Optional set of allowed submodes per transport mode provided in 'modes'. If at least one submode is set for a transport mode all submodes not set will be disregarded. Note that transportMode must also be included in 'modes' for the submodes to be allowed",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "INPUT_OBJECT",
                      "name": "TransportSubmodeFilter"
                    }
                  },
                  "defaultValue": "[]"
                },
                {
                  "name": "allowBikeRental",
                  "description": "Is bike rental allowed?",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "minimumTransferTime",
                  "description": "DEPRECATED - Use 'transferSlack/boardSlack/alightSlack' instead.  ",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "120"
                },
                {
                  "name": "transferSlack",
                  "description": "An expected transfer time (in seconds) that specifies the amount of time that must pass between exiting one public transport vehicle and boarding another. This time is in addition to time it might take to walk between stops.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "120"
                },
                {
                  "name": "boardSlackDefault",
                  "description": "The boardSlack is the minimum extra time to board a public transport vehicle. This is the same as the 'minimumTransferTime', except that this also apply to to the first transit leg in the trip. This is the default value used, if not overridden by the 'boardSlackList'.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "0"
                },
                {
                  "name": "boardSlackList",
                  "description": "List of boardSlack for a given set of modes. Defaults: [water : 60, air : 2100]",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "INPUT_OBJECT",
                      "name": "TransportModeSlack"
                    }
                  }
                },
                {
                  "name": "alightSlackDefault",
                  "description": "The alightSlack is the minimum extra time after exiting a public transport vehicle. This is the default value used, if not overridden by the 'alightSlackList'.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "0"
                },
                {
                  "name": "alightSlackList",
                  "description": "List of alightSlack for a given set of modes. Defaults: [water : 30, air : 900]",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "INPUT_OBJECT",
                      "name": "TransportModeSlack"
                    }
                  }
                },
                {
                  "name": "maximumTransfers",
                  "description": "Maximum number of transfers",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  }
                },
                {
                  "name": "ignoreRealtimeUpdates",
                  "description": "When true, realtime updates are ignored during this search.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "locale",
                  "type": {
                    "kind": "ENUM",
                    "name": "Locale"
                  },
                  "defaultValue": "no"
                },
                {
                  "name": "compactLegsByReversedSearch",
                  "description": "DEPRECATED - NO EFFECT IN OTP2",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "reverseOptimizeOnTheFly",
                  "description": "DEPRECATED - NO EFFECT IN OTP2.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "maxPreTransitTime",
                  "description": "Maximum time for the ride part of \"kiss and ride\" and \"ride and kiss\".",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "600"
                },
                {
                  "name": "maxPreTransitWalkDistance",
                  "description": "Max walk distance for access/egress legs. NOT IMPLEMENTED",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "useFlex",
                  "description": "NOT IMPLEMENTED",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  }
                },
                {
                  "name": "walkReluctance",
                  "description": "Walk cost is multiplied by this value. This is the main parameter to use for limiting walking.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  },
                  "defaultValue": "4.0"
                },
                {
                  "name": "debugItineraryFilter",
                  "description": "Debug the itinerary-filter-chain. The filters will mark itineraries as deleted, but NOT delete them when this is enabled.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "Trip"
              },
              "isDeprecated": false
            },
            {
              "name": "stopPlace",
              "description": "Get a single stopPlace based on its id)",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "StopPlace"
              },
              "isDeprecated": false
            },
            {
              "name": "stopPlaces",
              "description": "Get all stopPlaces",
              "args": [
                {
                  "name": "ids",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StopPlace"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "stopPlacesByBbox",
              "description": "Get all stop places within the specified bounding box",
              "args": [
                {
                  "name": "minimumLatitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "minimumLongitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "maximumLatitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "maximumLongitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "authority",
                  "type": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                },
                {
                  "name": "multiModalMode",
                  "description": "MultiModalMode for query. To control whether multi modal parent stop places, their mono modal children or both are included in the response. Does not affect mono modal stop places that do not belong to a multi modal stop place.",
                  "type": {
                    "kind": "ENUM",
                    "name": "MultiModalMode"
                  },
                  "defaultValue": "parent"
                },
                {
                  "name": "filterByInUse",
                  "description": "If true only stop places with at least one visiting line are included.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "StopPlace"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quay",
              "description": "Get a single quay based on its id)",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "Quay"
              },
              "isDeprecated": false
            },
            {
              "name": "quays",
              "description": "Get all quays",
              "args": [
                {
                  "name": "ids",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Quay"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quaysByBbox",
              "description": "Get all quays within the specified bounding box",
              "args": [
                {
                  "name": "minimumLatitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "minimumLongitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "maximumLatitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "maximumLongitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "authority",
                  "type": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                },
                {
                  "name": "filterByInUse",
                  "description": "If true only quays with at least one visiting line are included.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Quay"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quaysByRadius",
              "description": "Get all quays within the specified radius from a location. The returned type has two fields quay and distance",
              "args": [
                {
                  "name": "latitude",
                  "description": "Latitude of the location",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Float"
                    }
                  }
                },
                {
                  "name": "longitude",
                  "description": "Longitude of the location",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Float"
                    }
                  }
                },
                {
                  "name": "radius",
                  "description": "Radius (in meters) to search for from the specified location",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Int"
                    }
                  }
                },
                {
                  "name": "authority",
                  "type": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                },
                {
                  "name": "before",
                  "description": "fetching only nodes before this node (exclusive)",
                  "type": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                },
                {
                  "name": "after",
                  "description": "fetching only nodes after this node (exclusive)",
                  "type": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                },
                {
                  "name": "first",
                  "description": "fetching only the first certain number of nodes",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  }
                },
                {
                  "name": "last",
                  "description": "fetching only the last certain number of nodes",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "quayAtDistanceConnection"
              },
              "isDeprecated": false
            },
            {
              "name": "authority",
              "description": "Get an authority by ID",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "Authority"
              },
              "isDeprecated": false
            },
            {
              "name": "authorities",
              "description": "Get all authorities",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Authority"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "operator",
              "description": "Get a operator by ID",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "Operator"
              },
              "isDeprecated": false
            },
            {
              "name": "operators",
              "description": "Get all operators",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Operator"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "organisation",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "Organisation"
              },
              "isDeprecated": true,
              "deprecationReason": "Use 'authority' instead."
            },
            {
              "name": "organisations",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Organisation"
                  }
                }
              },
              "isDeprecated": true,
              "deprecationReason": "Use 'authorities' instead."
            },
            {
              "name": "line",
              "description": "Get a single line based on its id",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "Line"
              },
              "isDeprecated": false
            },
            {
              "name": "lines",
              "description": "Get all lines",
              "args": [
                {
                  "name": "ids",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                },
                {
                  "name": "name",
                  "type": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                },
                {
                  "name": "publicCode",
                  "type": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                },
                {
                  "name": "publicCodes",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                },
                {
                  "name": "transportModes",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "ENUM",
                      "name": "TransportMode"
                    }
                  }
                },
                {
                  "name": "authorities",
                  "description": "Set of ids of authorities to fetch lines for.",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Line"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourney",
              "description": "Get a single service journey based on its id",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "ServiceJourney"
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourneys",
              "description": "Get all service journeys",
              "args": [
                {
                  "name": "lines",
                  "description": "Set of ids of lines to fetch serviceJourneys for.",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                },
                {
                  "name": "privateCodes",
                  "description": "Set of ids of private codes to fetch serviceJourneys for.",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                },
                {
                  "name": "activeDates",
                  "description": "Set of ids of active dates to fetch serviceJourneys for.",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Date"
                    }
                  }
                },
                {
                  "name": "authorities",
                  "description": "Set of ids of authorities to fetch serviceJourneys for.",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ServiceJourney"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "bikeRentalStations",
              "description": "Get a single bike rental station based on its id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "BikeRentalStation"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "bikeRentalStation",
              "description": "Get all bike rental stations",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "BikeRentalStation"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeRentalStationsByBbox",
              "description": "Get all bike rental stations within the specified bounding box. NOT IMPLEMENTED",
              "args": [
                {
                  "name": "minimumLatitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "minimumLongitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "maximumLatitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                },
                {
                  "name": "maximumLongitude",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Float"
                  }
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "BikeRentalStation"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "bikePark",
              "description": "Get a single bike park based on its id",
              "args": [
                {
                  "name": "id",
                  "type": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                }
              ],
              "type": {
                "kind": "OBJECT",
                "name": "BikePark"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeParks",
              "description": "Get all bike parks",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "BikePark"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "routingParameters",
              "description": "Get default routing parameters.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "RoutingParameters"
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "Get all active situations.",
              "args": [
                {
                  "name": "authorities",
                  "description": "Filter by reporting authorities.",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "String"
                    }
                  }
                },
                {
                  "name": "severities",
                  "description": "Filter by severity.",
                  "type": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "ENUM",
                      "name": "Severity"
                    }
                  }
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "Trip",
          "description": "Description of a travel between two places.",
          "fields": [
            {
              "name": "dateTime",
              "description": "The time and date of travel",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "metadata",
              "description": "The trip request metadata.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "TripSearchData"
              },
              "isDeprecated": false
            },
            {
              "name": "fromPlace",
              "description": "The origin",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Place"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "toPlace",
              "description": "The destination",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Place"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "tripPatterns",
              "description": "A list of possible trip patterns",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "TripPattern"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "messageEnums",
              "description": "A list of possible error messages as enum",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "messageStrings",
              "description": "A list of possible error messages in cleartext",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "debugOutput",
              "description": "Information about the timings for the trip generation",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "debugOutput"
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "SCALAR",
          "name": "DateTime",
          "description": "DateTime format accepting ISO 8601 dates with time zone offset.\n\nFormat:  `YYYY-MM-DD'T'hh:mm[:ss](Z|±01:00)`\n\nExample: `2017-04-23T18:25:43+02:00` or `2017-04-23T16:25:43Z`"
        },
        {
          "kind": "OBJECT",
          "name": "TripSearchData",
          "description": "Trips search metadata.",
          "fields": [
            {
              "name": "searchWindowUsed",
              "description": "The search-window used in the current trip request. Use the value in the next request and set the request 'dateTime' to 'nextDateTime' or 'prevDateTime' to get the previous/next \"window\" of results. No duplicate trips should be returned, unless a trip is delayed and new realtime-data is available.Unit: minutes.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Int"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "nextDateTime",
              "description": "This is the suggested search time for the \"next page\" or time window. Insert it together with the 'searchWindowUsed' in the request to get a new set of trips following in the time-window AFTER the current search.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "prevDateTime",
              "description": "This is the suggested search time for the \"previous page\" or time-window. Insert it together with the 'searchWindowUsed' in the request to get a new set of trips preceding in the time-window BEFORE the current search.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "SCALAR",
          "name": "Int",
          "description": "Built-in Int"
        },
        {
          "kind": "OBJECT",
          "name": "Place",
          "description": "Common super class for all places (stop places, quays, car parks, bike parks and bike rental stations )",
          "fields": [
            {
              "name": "name",
              "description": "For transit quays, the name of the quay. For points of interest, the name of the POI.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "vertexType",
              "description": "Type of vertex. (Normal, Bike sharing station, Bike P+R, Transit quay) Mostly used for better localization of bike sharing and P+R station names",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "VertexType"
              },
              "isDeprecated": false
            },
            {
              "name": "latitude",
              "description": "The latitude of the place.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Float"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "longitude",
              "description": "The longitude of the place.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Float"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quay",
              "description": "The quay related to the place.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Quay"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeRentalStation",
              "description": "The bike rental station related to the place",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "BikeRentalStation"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "SCALAR",
          "name": "String",
          "description": "Built-in String"
        },
        {
          "kind": "ENUM",
          "name": "VertexType",
          "enumValues": [
            {
              "name": "normal",
              "isDeprecated": false
            },
            {
              "name": "transit",
              "isDeprecated": false
            },
            {
              "name": "bikePark",
              "isDeprecated": false
            },
            {
              "name": "bikeShare",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "SCALAR",
          "name": "Float",
          "description": "Built-in Float"
        },
        {
          "kind": "OBJECT",
          "name": "TripPattern",
          "description": "List of legs constituting a suggested sequence of rides and links for a specific trip.",
          "fields": [
            {
              "name": "startTime",
              "description": "Time that the trip departs.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "endTime",
              "description": "Time that the trip arrives.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "duration",
              "description": "Duration of the trip, in seconds.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Long"
              },
              "isDeprecated": false
            },
            {
              "name": "directDuration",
              "description": "NOT IMPLEMENTED.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Long"
              },
              "isDeprecated": false
            },
            {
              "name": "waitingTime",
              "description": "How much time is spent waiting for transit to arrive, in seconds.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Long"
              },
              "isDeprecated": false
            },
            {
              "name": "distance",
              "description": "Total distance for the trip, in meters. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "walkTime",
              "description": "How much time is spent walking, in seconds.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Long"
              },
              "isDeprecated": false
            },
            {
              "name": "walkDistance",
              "description": "How far the user has to walk, in meters.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "legs",
              "description": "A list of legs. Each leg is either a walking (cycling, car) portion of the trip, or a ride leg on a particular vehicle. So a trip where the use walks to the Q train, transfers to the 6, then walks to their destination, has four legs.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Leg"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "systemNotices",
              "description": "Get all system notices.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "SystemNotice"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "weight",
              "description": "Generalized cost or weight of the itinerary. Used for debugging.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "SCALAR",
          "name": "Long",
          "description": "Long type"
        },
        {
          "kind": "OBJECT",
          "name": "Leg",
          "description": "Part of a trip pattern. Either a ride on a public transport vehicle or access or path link to/from/between places",
          "fields": [
            {
              "name": "startTime",
              "description": "The date and time this leg begins.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": true,
              "deprecationReason": "Replaced with expectedStartTime"
            },
            {
              "name": "endTime",
              "description": "The date and time this leg ends.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": true,
              "deprecationReason": "Replaced with expectedEndTime"
            },
            {
              "name": "aimedStartTime",
              "description": "The aimed date and time this leg starts.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "expectedStartTime",
              "description": "The expected, realtime adjusted date and time this leg starts.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "aimedEndTime",
              "description": "The aimed date and time this leg ends.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "expectedEndTime",
              "description": "The expected, realtime adjusted date and time this leg ends.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "mode",
              "description": "The mode of transport or access (e.g., foot) used when traversing this leg.",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "Mode"
              },
              "isDeprecated": false
            },
            {
              "name": "transportSubmode",
              "description": "The transport sub mode (e.g., localBus or expressBus) used when traversing this leg. Null if leg is not a ride",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "TransportSubmode"
              },
              "isDeprecated": false
            },
            {
              "name": "duration",
              "description": "The legs's duration in seconds",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Long"
              },
              "isDeprecated": false
            },
            {
              "name": "directDuration",
              "description": "NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Long"
              },
              "isDeprecated": false
            },
            {
              "name": "pointsOnLink",
              "description": "The legs's geometry.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "PointsOnLink"
              },
              "isDeprecated": false
            },
            {
              "name": "authority",
              "description": "For ride legs, the service authority used for this legs. For non-ride legs, null.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Authority"
              },
              "isDeprecated": false
            },
            {
              "name": "operator",
              "description": "For ride legs, the operator used for this legs. For non-ride legs, null.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Operator"
              },
              "isDeprecated": false
            },
            {
              "name": "organisation",
              "description": "For ride legs, the transit organisation that operates the service used for this legs. For non-ride legs, null.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Organisation"
              },
              "isDeprecated": true,
              "deprecationReason": "Use 'authority' instead."
            },
            {
              "name": "realTime",
              "description": "Whether there is real-time data about this leg",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": true,
              "deprecationReason": "Should not be camelCase. Use realtime instead."
            },
            {
              "name": "realtime",
              "description": "Whether there is real-time data about this leg",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "distance",
              "description": "The distance traveled while traversing the leg in meters.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "ride",
              "description": "Whether this leg is a ride leg or not.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "rentedBike",
              "description": "Whether this leg is with a rented bike.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "fromPlace",
              "description": "The Place where the leg originates.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Place"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "toPlace",
              "description": "The Place where the leg ends.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Place"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "fromEstimatedCall",
              "description": "EstimatedCall for the quay where the leg originates. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "EstimatedCall"
              },
              "isDeprecated": false
            },
            {
              "name": "toEstimatedCall",
              "description": "EstimatedCall for the quay where the leg ends. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "EstimatedCall"
              },
              "isDeprecated": false
            },
            {
              "name": "line",
              "description": "For ride legs, the line. For non-ride legs, null.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Line"
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourney",
              "description": "For ride legs, the service journey. For non-ride legs, null.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "ServiceJourney"
              },
              "isDeprecated": false
            },
            {
              "name": "intermediateQuays",
              "description": "For ride legs, intermediate quays between the Place where the leg originates and the Place where the leg ends. For non-ride legs, empty list.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Quay"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "intermediateEstimatedCalls",
              "description": "For ride legs, estimated calls for quays between the Place where the leg originates and the Place where the leg ends. For non-ride legs, empty list.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "EstimatedCall"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourneyEstimatedCalls",
              "description": "For ride legs, all estimated calls for the service journey. For non-ride legs, empty list.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "EstimatedCall"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "All relevant situations for this leg",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "steps",
              "description": "Do we continue from a specified via place",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PathGuidance"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "interchangeFrom",
              "description": "NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Interchange"
              },
              "isDeprecated": false
            },
            {
              "name": "interchangeTo",
              "description": "NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Interchange"
              },
              "isDeprecated": false
            },
            {
              "name": "bookingArrangements",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "BookingArrangement"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "Mode",
          "description": "NOT IMPLEMENTED",
          "enumValues": [
            {
              "name": "air",
              "isDeprecated": false
            },
            {
              "name": "bicycle",
              "isDeprecated": false
            },
            {
              "name": "bus",
              "isDeprecated": false
            },
            {
              "name": "cableway",
              "isDeprecated": false
            },
            {
              "name": "water",
              "isDeprecated": false
            },
            {
              "name": "funicular",
              "isDeprecated": false
            },
            {
              "name": "lift",
              "isDeprecated": false
            },
            {
              "name": "rail",
              "isDeprecated": false
            },
            {
              "name": "metro",
              "isDeprecated": false
            },
            {
              "name": "tram",
              "isDeprecated": false
            },
            {
              "name": "coach",
              "isDeprecated": false
            },
            {
              "name": "transit",
              "description": "Any for of public transportation",
              "isDeprecated": false
            },
            {
              "name": "foot",
              "isDeprecated": false
            },
            {
              "name": "car",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "ENUM",
          "name": "TransportSubmode",
          "enumValues": [
            {
              "name": "unknown",
              "isDeprecated": false
            },
            {
              "name": "undefined",
              "isDeprecated": false
            },
            {
              "name": "internationalFlight",
              "isDeprecated": false
            },
            {
              "name": "domesticFlight",
              "isDeprecated": false
            },
            {
              "name": "intercontinentalFlight",
              "isDeprecated": false
            },
            {
              "name": "domesticScheduledFlight",
              "isDeprecated": false
            },
            {
              "name": "shuttleFlight",
              "isDeprecated": false
            },
            {
              "name": "intercontinentalCharterFlight",
              "isDeprecated": false
            },
            {
              "name": "internationalCharterFlight",
              "isDeprecated": false
            },
            {
              "name": "roundTripCharterFlight",
              "isDeprecated": false
            },
            {
              "name": "sightseeingFlight",
              "isDeprecated": false
            },
            {
              "name": "helicopterService",
              "isDeprecated": false
            },
            {
              "name": "domesticCharterFlight",
              "isDeprecated": false
            },
            {
              "name": "SchengenAreaFlight",
              "isDeprecated": false
            },
            {
              "name": "airshipService",
              "isDeprecated": false
            },
            {
              "name": "shortHaulInternationalFlight",
              "isDeprecated": false
            },
            {
              "name": "canalBarge",
              "isDeprecated": false
            },
            {
              "name": "localBus",
              "isDeprecated": false
            },
            {
              "name": "regionalBus",
              "isDeprecated": false
            },
            {
              "name": "expressBus",
              "isDeprecated": false
            },
            {
              "name": "nightBus",
              "isDeprecated": false
            },
            {
              "name": "postBus",
              "isDeprecated": false
            },
            {
              "name": "specialNeedsBus",
              "isDeprecated": false
            },
            {
              "name": "mobilityBus",
              "isDeprecated": false
            },
            {
              "name": "mobilityBusForRegisteredDisabled",
              "isDeprecated": false
            },
            {
              "name": "sightseeingBus",
              "isDeprecated": false
            },
            {
              "name": "shuttleBus",
              "isDeprecated": false
            },
            {
              "name": "highFrequencyBus",
              "isDeprecated": false
            },
            {
              "name": "dedicatedLaneBus",
              "isDeprecated": false
            },
            {
              "name": "schoolBus",
              "isDeprecated": false
            },
            {
              "name": "schoolAndPublicServiceBus",
              "isDeprecated": false
            },
            {
              "name": "railReplacementBus",
              "isDeprecated": false
            },
            {
              "name": "demandAndResponseBus",
              "isDeprecated": false
            },
            {
              "name": "airportLinkBus",
              "isDeprecated": false
            },
            {
              "name": "internationalCoach",
              "isDeprecated": false
            },
            {
              "name": "nationalCoach",
              "isDeprecated": false
            },
            {
              "name": "shuttleCoach",
              "isDeprecated": false
            },
            {
              "name": "regionalCoach",
              "isDeprecated": false
            },
            {
              "name": "specialCoach",
              "isDeprecated": false
            },
            {
              "name": "schoolCoach",
              "isDeprecated": false
            },
            {
              "name": "sightseeingCoach",
              "isDeprecated": false
            },
            {
              "name": "touristCoach",
              "isDeprecated": false
            },
            {
              "name": "commuterCoach",
              "isDeprecated": false
            },
            {
              "name": "funicular",
              "isDeprecated": false
            },
            {
              "name": "streetCableCar",
              "isDeprecated": false
            },
            {
              "name": "allFunicularServices",
              "isDeprecated": false
            },
            {
              "name": "undefinedFunicular",
              "isDeprecated": false
            },
            {
              "name": "metro",
              "isDeprecated": false
            },
            {
              "name": "tube",
              "isDeprecated": false
            },
            {
              "name": "urbanRailway",
              "isDeprecated": false
            },
            {
              "name": "cityTram",
              "isDeprecated": false
            },
            {
              "name": "localTram",
              "isDeprecated": false
            },
            {
              "name": "regionalTram",
              "isDeprecated": false
            },
            {
              "name": "sightseeingTram",
              "isDeprecated": false
            },
            {
              "name": "shuttleTram",
              "isDeprecated": false
            },
            {
              "name": "trainTram",
              "isDeprecated": false
            },
            {
              "name": "telecabin",
              "isDeprecated": false
            },
            {
              "name": "cableCar",
              "isDeprecated": false
            },
            {
              "name": "lift",
              "isDeprecated": false
            },
            {
              "name": "chairLift",
              "isDeprecated": false
            },
            {
              "name": "dragLift",
              "isDeprecated": false
            },
            {
              "name": "telecabinLink",
              "isDeprecated": false
            },
            {
              "name": "local",
              "isDeprecated": false
            },
            {
              "name": "highSpeedRail",
              "isDeprecated": false
            },
            {
              "name": "suburbanRailway",
              "isDeprecated": false
            },
            {
              "name": "regionalRail",
              "isDeprecated": false
            },
            {
              "name": "interregionalRail",
              "isDeprecated": false
            },
            {
              "name": "longDistance",
              "isDeprecated": false
            },
            {
              "name": "international",
              "isDeprecated": false
            },
            {
              "name": "sleeperRailService",
              "isDeprecated": false
            },
            {
              "name": "nightRail",
              "isDeprecated": false
            },
            {
              "name": "carTransportRailService",
              "isDeprecated": false
            },
            {
              "name": "touristRailway",
              "isDeprecated": false
            },
            {
              "name": "airportLinkRail",
              "isDeprecated": false
            },
            {
              "name": "railShuttle",
              "isDeprecated": false
            },
            {
              "name": "replacementRailService",
              "isDeprecated": false
            },
            {
              "name": "specialTrain",
              "isDeprecated": false
            },
            {
              "name": "crossCountryRail",
              "isDeprecated": false
            },
            {
              "name": "rackAndPinionRailway",
              "isDeprecated": false
            },
            {
              "name": "internationalCarFerry",
              "isDeprecated": false
            },
            {
              "name": "nationalCarFerry",
              "isDeprecated": false
            },
            {
              "name": "regionalCarFerry",
              "isDeprecated": false
            },
            {
              "name": "localCarFerry",
              "isDeprecated": false
            },
            {
              "name": "internationalPassengerFerry",
              "isDeprecated": false
            },
            {
              "name": "nationalPassengerFerry",
              "isDeprecated": false
            },
            {
              "name": "regionalPassengerFerry",
              "isDeprecated": false
            },
            {
              "name": "localPassengerFerry",
              "isDeprecated": false
            },
            {
              "name": "postBoat",
              "isDeprecated": false
            },
            {
              "name": "trainFerry",
              "isDeprecated": false
            },
            {
              "name": "roadFerryLink",
              "isDeprecated": false
            },
            {
              "name": "airportBoatLink",
              "isDeprecated": false
            },
            {
              "name": "highSpeedVehicleService",
              "isDeprecated": false
            },
            {
              "name": "highSpeedPassengerService",
              "isDeprecated": false
            },
            {
              "name": "sightseeingService",
              "isDeprecated": false
            },
            {
              "name": "schoolBoat",
              "isDeprecated": false
            },
            {
              "name": "cableFerry",
              "isDeprecated": false
            },
            {
              "name": "riverBus",
              "isDeprecated": false
            },
            {
              "name": "scheduledFerry",
              "isDeprecated": false
            },
            {
              "name": "shuttleFerryService",
              "isDeprecated": false
            },
            {
              "name": "communalTaxi",
              "isDeprecated": false
            },
            {
              "name": "charterTaxi",
              "isDeprecated": false
            },
            {
              "name": "waterTaxi",
              "isDeprecated": false
            },
            {
              "name": "railTaxi",
              "isDeprecated": false
            },
            {
              "name": "bikeTaxi",
              "isDeprecated": false
            },
            {
              "name": "blackCab",
              "isDeprecated": false
            },
            {
              "name": "miniCab",
              "isDeprecated": false
            },
            {
              "name": "allTaxiServices",
              "isDeprecated": false
            },
            {
              "name": "hireCar",
              "isDeprecated": false
            },
            {
              "name": "hireVan",
              "isDeprecated": false
            },
            {
              "name": "hireMotorbike",
              "isDeprecated": false
            },
            {
              "name": "hireCycle",
              "isDeprecated": false
            },
            {
              "name": "allHireVehicles",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "PointsOnLink",
          "description": "A list of coordinates encoded as a polyline string (see http://code.google.com/apis/maps/documentation/polylinealgorithm.html)",
          "fields": [
            {
              "name": "length",
              "description": "The number of points in the string",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "points",
              "description": "The encoded points of the polyline. Be aware that the string could contain escape characters that need to be accounted for. (https://www.freeformatter.com/javascript-escape.html)",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "SCALAR",
          "name": "Boolean",
          "description": "Built-in Boolean"
        },
        {
          "kind": "OBJECT",
          "name": "PathGuidance",
          "description": "A series of turn by turn instructions used for walking, biking and driving.",
          "fields": [
            {
              "name": "distance",
              "description": "The distance in meters that this step takes.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "relativeDirection",
              "description": "The relative direction of this step.",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "RelativeDirection"
              },
              "isDeprecated": false
            },
            {
              "name": "streetName",
              "description": "The name of the street.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "heading",
              "description": "The absolute direction of this step.",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "AbsoluteDirection"
              },
              "isDeprecated": false
            },
            {
              "name": "exit",
              "description": "When exiting a highway or traffic circle, the exit name/number.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "stayOn",
              "description": "Indicates whether or not a street changes direction at an intersection.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "area",
              "description": "This step is on an open area, such as a plaza or train platform, and thus the directions should say something like \"cross\"",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "bogusName",
              "description": "The name of this street was generated by the system, so we should only display it once, and generally just display right/left directions",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "latitude",
              "description": "The latitude of the step.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "longitude",
              "description": "The longitude of the step.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "RelativeDirection",
          "enumValues": [
            {
              "name": "depart",
              "isDeprecated": false
            },
            {
              "name": "hardLeft",
              "isDeprecated": false
            },
            {
              "name": "left",
              "isDeprecated": false
            },
            {
              "name": "slightlyLeft",
              "isDeprecated": false
            },
            {
              "name": "continue",
              "isDeprecated": false
            },
            {
              "name": "slightlyRight",
              "isDeprecated": false
            },
            {
              "name": "right",
              "isDeprecated": false
            },
            {
              "name": "hardRight",
              "isDeprecated": false
            },
            {
              "name": "circleClockwise",
              "isDeprecated": false
            },
            {
              "name": "circleCounterclockwise",
              "isDeprecated": false
            },
            {
              "name": "elevator",
              "isDeprecated": false
            },
            {
              "name": "uturnLeft",
              "isDeprecated": false
            },
            {
              "name": "uturnRight",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "ENUM",
          "name": "AbsoluteDirection",
          "enumValues": [
            {
              "name": "north",
              "isDeprecated": false
            },
            {
              "name": "northeast",
              "isDeprecated": false
            },
            {
              "name": "east",
              "isDeprecated": false
            },
            {
              "name": "southeast",
              "isDeprecated": false
            },
            {
              "name": "south",
              "isDeprecated": false
            },
            {
              "name": "southwest",
              "isDeprecated": false
            },
            {
              "name": "west",
              "isDeprecated": false
            },
            {
              "name": "northwest",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "Interchange",
          "fields": [
            {
              "name": "staySeated",
              "description": "Time that the trip departs. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "guaranteed",
              "description": "Time that the trip departs. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "FromLine",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Line"
              },
              "isDeprecated": false
            },
            {
              "name": "ToLine",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Line"
              },
              "isDeprecated": false
            },
            {
              "name": "FromServiceJourney",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "ServiceJourney"
              },
              "isDeprecated": false
            },
            {
              "name": "ToServiceJourney",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "ServiceJourney"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "BookingArrangement",
          "fields": [
            {
              "name": "bookingMethods",
              "description": "How should service be booked?",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "latestBookingTime",
              "description": "Latest time service can be booked. ISO 8601 timestamp",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "LocalTime"
              },
              "isDeprecated": false
            },
            {
              "name": "minimumBookingPeriod",
              "description": "Minimum period in advance service can be booked as a ISO 8601 duration",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "bookingNote",
              "description": "Textual description of booking arrangement for service",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "bookingContact",
              "description": "Who should ticket be contacted for booking",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Contact"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "SCALAR",
          "name": "LocalTime",
          "description": "Time using the format: HH:mm:SS. Example: 18:25:SS"
        },
        {
          "kind": "OBJECT",
          "name": "Contact",
          "fields": [
            {
              "name": "contactPerson",
              "description": "Name of person to contact",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "email",
              "description": "Email adress for contact",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "url",
              "description": "Url for contact",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "phone",
              "description": "Phone number for contact",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "furtherDetails",
              "description": "Textual description of how to get in contact",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "SystemNotice",
          "description": "A system notice is used to tag elements with system information for debugging or other system related purpose. One use-case is to run a routing search with 'debugItineraryFilter: true'. This will then tag itineraries instead of removing them from the result. This make it possible to inspect the itinerary-filter-chain. A SystemNotice only have english text, because the primary user are technical staff, like testers and developers.",
          "fields": [
            {
              "name": "tag",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "text",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "debugOutput",
          "fields": [
            {
              "name": "totalTime",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Long"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "Location",
          "description": "Input format for specifying a location through either a place reference (id), coordinates or both. If both place and coordinates are provided the place ref will be used if found, coordinates will only be used if place is not known.",
          "inputFields": [
            {
              "name": "name",
              "description": "The name of the location. This is pass-through informationand is not used in routing.",
              "type": {
                "kind": "SCALAR",
                "name": "String"
              }
            },
            {
              "name": "place",
              "description": "The id of an element in the OTP model. Currently supports Quay, StopPlace, multimodal StopPlace, and GroupOfStopPlaces.",
              "type": {
                "kind": "SCALAR",
                "name": "String"
              }
            },
            {
              "name": "coordinates",
              "description": "Coordinates for the location. This can be used alone or as fallback if the place id is not found.",
              "type": {
                "kind": "INPUT_OBJECT",
                "name": "InputCoordinates"
              }
            }
          ]
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "InputCoordinates",
          "description": "Input type for coordinates in the WGS84 system",
          "inputFields": [
            {
              "name": "latitude",
              "description": "The latitude of the place.",
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Float"
                }
              }
            },
            {
              "name": "longitude",
              "description": "The longitude of the place.",
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Float"
                }
              }
            }
          ]
        },
        {
          "kind": "ENUM",
          "name": "OptimisationMethod",
          "enumValues": [
            {
              "name": "quick",
              "isDeprecated": false
            },
            {
              "name": "safe",
              "isDeprecated": false
            },
            {
              "name": "flat",
              "isDeprecated": false
            },
            {
              "name": "greenways",
              "isDeprecated": false
            },
            {
              "name": "triangle",
              "isDeprecated": false
            },
            {
              "name": "transfers",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "InputPreferred",
          "description": "Preferences for trip search.",
          "inputFields": [
            {
              "name": "lines",
              "description": "Set of ids of lines preferred by user.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "authorities",
              "description": "Set of ids of authorities preferred by user.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "organisations",
              "description": "Deprecated! Use 'authorities' instead.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "otherThanPreferredLinesPenalty",
              "description": "Penalty added for using a line that is not preferred if user has set any line as preferred. In number of seconds that user is willing to wait for preferred line.",
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "defaultValue": "300"
            }
          ]
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "InputUnpreferred",
          "description": "Negative preferences for trip search. Unpreferred elements may still be used in suggested trips if alternatives are not desirable, see InputBanned for hard limitations.",
          "inputFields": [
            {
              "name": "lines",
              "description": "Set of ids of lines user prefers not to use.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "authorities",
              "description": "Set of ids of authorities user prefers not to use.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "organisations",
              "description": "Deprecated! Use 'authorities' instead.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            }
          ]
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "InputBanned",
          "description": "Filter trips by disallowing lines involving certain elements. If both lines and authorities are specified, only one must be valid for each line to be banned. If a line is both banned and whitelisted, it will be counted as banned.",
          "inputFields": [
            {
              "name": "lines",
              "description": "Set of ids for lines that should not be used",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "authorities",
              "description": "Set of ids for authorities that should not be used",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "organisations",
              "description": "Deprecated! Use 'authorities' instead.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "quays",
              "description": "Set of ids of quays that should not be allowed for boarding or alighting. Trip patterns that travel through the quay will still be permitted.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "quaysHard",
              "description": "Set of ids of quays that should not be allowed for boarding, alighting or traveling thorugh.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "serviceJourneys",
              "description": "Set of ids of service journeys that should not be used.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "defaultValue": "[]"
            }
          ]
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "InputWhiteListed",
          "description": "Filter trips by only allowing lines involving certain elements. If both lines and authorities are specified, only one must be valid for each line to be used. If a line is both banned and whitelisted, it will be counted as banned.",
          "inputFields": [
            {
              "name": "lines",
              "description": "Set of ids for lines that should be used",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              }
            },
            {
              "name": "authorities",
              "description": "Set of ids for authorities that should be used",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              }
            },
            {
              "name": "organisations",
              "description": "Deprecated! Use 'authorities' instead.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              }
            }
          ]
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "Modes",
          "description": "Input format for specifying which modes will be allowed for this search. If this element is not present, it will default to accessMode/egressMode/directMode of foot and all transport modes will be allowed.",
          "inputFields": [
            {
              "name": "accessMode",
              "description": "The mode used to get from the origin to the access stops in the transit network the transit network (first-mile). If the element is not present or null,only transit that can be immediately boarded from the origin will be used.",
              "type": {
                "kind": "ENUM",
                "name": "StreetMode"
              }
            },
            {
              "name": "egressMode",
              "description": "The mode used to get from the egress stops in the transit network tothe destination (last-mile). If the element is not present or null,only transit that can immediately arrive at the origin will be used.",
              "type": {
                "kind": "ENUM",
                "name": "StreetMode"
              }
            },
            {
              "name": "directMode",
              "description": "The mode used to get from the origin to the destination directly, without using the transit network. If the element is not present or null,direct travel without using transit will be disallowed.",
              "type": {
                "kind": "ENUM",
                "name": "StreetMode"
              }
            },
            {
              "name": "transportMode",
              "description": "The allowed modes for the transit part of the trip. Use an empty list to disallow transit for this search. If the element is not present or null, it will default to all transport modes.",
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "ENUM",
                  "name": "TransportMode"
                }
              }
            }
          ]
        },
        {
          "kind": "ENUM",
          "name": "StreetMode",
          "enumValues": [
            {
              "name": "foot",
              "description": "Walk only",
              "isDeprecated": false
            },
            {
              "name": "bicycle",
              "description": "   * Bike only. This can be used as access/egress, but transfers will still be walk only.",
              "isDeprecated": false
            },
            {
              "name": "bike_park",
              "description": "Bike to a bike parking area, then walk the rest of the way. Direct mode and access mode only.",
              "isDeprecated": false
            },
            {
              "name": "bike_rental",
              "description": "Walk to a bike rental point, bike to a bike rental drop-off point, and walk the rest of the way. This can include bike rental at fixed locations or free-floating services.",
              "isDeprecated": false
            },
            {
              "name": "car",
              "description": "Car only. Direct mode only.",
              "isDeprecated": false
            },
            {
              "name": "car_park",
              "description": "Start in the car, drive to a parking area, and walk the rest of the way. Direct mode and access mode only.",
              "isDeprecated": false
            },
            {
              "name": "car_pickup",
              "description": "Walk to a pickup point along the road, drive to a drop-off point along the road, and walk the rest of the way. This can include various taxi-services or kiss & ride.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "ENUM",
          "name": "TransportMode",
          "description": "NOT IMPLEMENTED",
          "enumValues": [
            {
              "name": "air",
              "isDeprecated": false
            },
            {
              "name": "bus",
              "isDeprecated": false
            },
            {
              "name": "cableway",
              "isDeprecated": false
            },
            {
              "name": "water",
              "isDeprecated": false
            },
            {
              "name": "funicular",
              "isDeprecated": false
            },
            {
              "name": "lift",
              "isDeprecated": false
            },
            {
              "name": "rail",
              "isDeprecated": false
            },
            {
              "name": "metro",
              "isDeprecated": false
            },
            {
              "name": "tram",
              "isDeprecated": false
            },
            {
              "name": "coach",
              "isDeprecated": false
            },
            {
              "name": "unknown",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "TransportSubmodeFilter",
          "description": "Filter trips by allowing only certain transport submodes per mode.",
          "inputFields": [
            {
              "name": "transportMode",
              "description": "Set of ids for lines that should be used",
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "ENUM",
                  "name": "TransportMode"
                }
              }
            },
            {
              "name": "transportSubmodes",
              "description": "Set of transport submodes allowed for transport mode.",
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "ENUM",
                    "name": "TransportSubmode"
                  }
                }
              }
            }
          ]
        },
        {
          "kind": "INPUT_OBJECT",
          "name": "TransportModeSlack",
          "description": "Used to specify board and alight slack for a given modes.",
          "inputFields": [
            {
              "name": "slack",
              "description": "The slack used for all given modes.",
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Int"
                }
              }
            },
            {
              "name": "modes",
              "description": "List of modes for witch the given slack apply.",
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "ENUM",
                      "name": "TransportMode"
                    }
                  }
                }
              }
            }
          ]
        },
        {
          "kind": "ENUM",
          "name": "Locale",
          "enumValues": [
            {
              "name": "no",
              "isDeprecated": false
            },
            {
              "name": "us",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "StopPlace",
          "description": "Named place where public transport may be accessed. May be a building complex (e.g. a station) or an on-street location.",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "latitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "longitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "wheelchairBoarding",
              "description": "Whether this stop place is suitable for wheelchair boarding.",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "WheelchairBoarding"
              },
              "isDeprecated": false
            },
            {
              "name": "weighting",
              "description": "Relative weighting of this stop with regards to interchanges. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "InterchangeWeighting"
              },
              "isDeprecated": false
            },
            {
              "name": "tariffZones",
              "description": "NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "TariffZone"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "transportMode",
              "description": "The transport mode serviced by this stop place.  NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "TransportMode"
              },
              "isDeprecated": false
            },
            {
              "name": "transportSubmode",
              "description": "The transport submode serviced by this stop place. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "TransportSubmode"
              },
              "isDeprecated": false
            },
            {
              "name": "timezone",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quays",
              "description": "Returns all quays that are children of this stop place",
              "args": [
                {
                  "name": "filterByInUse",
                  "description": "If true only quays with at least one visiting line are included.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Quay"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "parent",
              "description": "Returns parent stop for this stop",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "StopPlace"
              },
              "isDeprecated": false
            },
            {
              "name": "estimatedCalls",
              "description": "List of visits to this stop place as part of vehicle journeys.",
              "args": [
                {
                  "name": "startTime",
                  "description": "DateTime for when to fetch estimated calls from. Default value is current time",
                  "type": {
                    "kind": "SCALAR",
                    "name": "DateTime"
                  }
                },
                {
                  "name": "timeRange",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "86400"
                },
                {
                  "name": "numberOfDepartures",
                  "description": "Limit the total number of departures returned.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "5"
                },
                {
                  "name": "numberOfDeparturesPerLineAndDestinationDisplay",
                  "description": "Limit the number of departures per line and destination display returned. The parameter is only applied when the value is between 1 and 'numberOfDepartures'.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  }
                },
                {
                  "name": "omitNonBoarding",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "whiteListed",
                  "description": "Parameters for indicating the only authorities and/or lines or quays to list estimatedCalls for",
                  "type": {
                    "kind": "INPUT_OBJECT",
                    "name": "InputWhiteListed"
                  }
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "EstimatedCall"
                  }
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": [
            {
              "kind": "INTERFACE",
              "name": "PlaceInterface"
            }
          ]
        },
        {
          "kind": "SCALAR",
          "name": "ID",
          "description": "Built-in ID"
        },
        {
          "kind": "ENUM",
          "name": "WheelchairBoarding",
          "enumValues": [
            {
              "name": "noInformation",
              "description": "There is no accessibility information for the stopPlace/quay.",
              "isDeprecated": false
            },
            {
              "name": "possible",
              "description": "Boarding wheelchair-accessible serviceJourneys is possible at this stopPlace/quay.",
              "isDeprecated": false
            },
            {
              "name": "notPossible",
              "description": "Wheelchair boarding/alighting is not possible at this stop.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "ENUM",
          "name": "InterchangeWeighting",
          "enumValues": [
            {
              "name": "preferredInterchange",
              "description": "Highest priority interchange.",
              "isDeprecated": false
            },
            {
              "name": "recommendedInterchange",
              "description": "Second highest priority interchange.",
              "isDeprecated": false
            },
            {
              "name": "interchangeAllowed",
              "description": "Third highest priority interchange.",
              "isDeprecated": false
            },
            {
              "name": "noInterchange",
              "description": "Interchange not allowed.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "TariffZone",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "INTERFACE",
          "name": "PlaceInterface",
          "description": "Interface for places, i.e. quays, stop places, parks",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "latitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "longitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            }
          ],
          "possibleTypes": [
            {
              "kind": "OBJECT",
              "name": "StopPlace"
            },
            {
              "kind": "OBJECT",
              "name": "Quay"
            },
            {
              "kind": "OBJECT",
              "name": "BikeRentalStation"
            },
            {
              "kind": "OBJECT",
              "name": "BikePark"
            }
          ]
        },
        {
          "kind": "ENUM",
          "name": "MultiModalMode",
          "enumValues": [
            {
              "name": "parent",
              "description": "Multi modal parent stop places without their mono modal children.",
              "isDeprecated": false
            },
            {
              "name": "child",
              "description": "Only mono modal children stop places, not their multi modal parent stop",
              "isDeprecated": false
            },
            {
              "name": "all",
              "description": "Both multiModal parents and their mono modal child stop places.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "Quay",
          "description": "A place such as platform, stance, or quayside where passengers have access to PT vehicles.",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "latitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "longitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "stopPlace",
              "description": "The stop place to which this quay belongs to.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "StopPlace"
              },
              "isDeprecated": false
            },
            {
              "name": "wheelchairAccessible",
              "description": "Whether this quay is suitable for wheelchair boarding.",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "WheelchairBoarding"
              },
              "isDeprecated": false
            },
            {
              "name": "timezone",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "publicCode",
              "description": "Public code used to identify this quay within the stop place. For instance a platform code.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "lines",
              "description": "List of lines servicing this quay",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "Line"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "journeyPatterns",
              "description": "List of journey patterns servicing this quay",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "JourneyPattern"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "estimatedCalls",
              "description": "List of visits to this quay as part of vehicle journeys.",
              "args": [
                {
                  "name": "startTime",
                  "description": "DateTime for when to fetch estimated calls from. Default value is current time",
                  "type": {
                    "kind": "SCALAR",
                    "name": "DateTime"
                  }
                },
                {
                  "name": "timeRange",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "86400"
                },
                {
                  "name": "numberOfDepartures",
                  "description": "Limit the total number of departures returned.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  },
                  "defaultValue": "5"
                },
                {
                  "name": "numberOfDeparturesPerLineAndDestinationDisplay",
                  "description": "Limit the number of departures per line and destination display returned. The parameter is only applied when the value is between 1 and 'numberOfDepartures'.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Int"
                  }
                },
                {
                  "name": "omitNonBoarding",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "whiteListed",
                  "description": "Parameters for indicating the only authorities and/or lines or quays to list estimatedCalls for",
                  "type": {
                    "kind": "INPUT_OBJECT",
                    "name": "InputWhiteListed"
                  }
                },
                {
                  "name": "includeCancelledTrips",
                  "description": "Indicates that realtime-cancelled trips should also be included. NOT IMPLEMENTED",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "EstimatedCall"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "Get all situations active for the quay.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "flexibleArea",
              "description": "Geometry for flexible area.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Coordinates"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": [
            {
              "kind": "INTERFACE",
              "name": "PlaceInterface"
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "PtSituationElement",
          "description": "Simple public transport situation element",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "authority",
              "description": "Get affected authority for this situation element",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Authority"
              },
              "isDeprecated": false
            },
            {
              "name": "organisation",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Organisation"
              },
              "isDeprecated": true,
              "deprecationReason": "Use 'authority' instead."
            },
            {
              "name": "lines",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Line"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourneys",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ServiceJourney"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quays",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Quay"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "summary",
              "description": "Summary of situation in all different translations available",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "MultilingualString"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "description": "Description of situation in all different translations available",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "MultilingualString"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "detail",
              "description": "Details of situation in all different translations available",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "MultilingualString"
                    }
                  }
                }
              },
              "isDeprecated": true,
              "deprecationReason": "Not allowed according to profile. Use ´advice´ instead."
            },
            {
              "name": "advice",
              "description": "Advice of situation in all different translations available",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "MultilingualString"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "infoLink",
              "description": "Url with more information",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": true,
              "deprecationReason": "Use the attribute infoLinks instead."
            },
            {
              "name": "infoLinks",
              "description": "Optional links to more information.",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "infoLink"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "validityPeriod",
              "description": "Period this situation is in effect",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "ValidityPeriod"
              },
              "isDeprecated": false
            },
            {
              "name": "reportType",
              "description": "ReportType of this situation",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "ReportType"
              },
              "isDeprecated": false
            },
            {
              "name": "situationNumber",
              "description": "Operator's internal id for this situation",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "reportAuthority",
              "description": "Authority that reported this situation",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Authority"
              },
              "isDeprecated": true,
              "deprecationReason": "Not yet officially supported. May be removed or renamed."
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "MultilingualString",
          "description": "Text with language",
          "fields": [
            {
              "name": "value",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "language",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "infoLink",
          "fields": [
            {
              "name": "uri",
              "description": "URI",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "label",
              "description": "Label",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "ValidityPeriod",
          "fields": [
            {
              "name": "startTime",
              "description": "Start of validity period",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "endTime",
              "description": "End of validity period",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "ReportType",
          "enumValues": [
            {
              "name": "general",
              "description": "Indicates a general info-message that should not affect trip.",
              "isDeprecated": false
            },
            {
              "name": "incident",
              "description": "Indicates an incident that may affect trip.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "SCALAR",
          "name": "Coordinates"
        },
        {
          "kind": "OBJECT",
          "name": "quayAtDistanceConnection",
          "description": "A connection to a list of items.",
          "fields": [
            {
              "name": "edges",
              "description": "a list of edges",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "quayAtDistanceEdge"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "pageInfo",
              "description": "details about this specific page",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "PageInfo"
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "quayAtDistanceEdge",
          "description": "An edge in a connection",
          "fields": [
            {
              "name": "node",
              "description": "The item at the end of the edge",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "QuayAtDistance"
              },
              "isDeprecated": false
            },
            {
              "name": "cursor",
              "description": "cursor marks a unique position or index into the connection",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "QuayAtDistance",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quay",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Quay"
              },
              "isDeprecated": false
            },
            {
              "name": "distance",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "PageInfo",
          "description": "Information about pagination in a connection.",
          "fields": [
            {
              "name": "hasNextPage",
              "description": "When paginating forwards, are there more items?",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Boolean"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "hasPreviousPage",
              "description": "When paginating backwards, are there more items?",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Boolean"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "startCursor",
              "description": "When paginating backwards, the cursor to continue.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "endCursor",
              "description": "When paginating forwards, the cursor to continue.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "Authority",
          "description": "Authority involved in public transportation. An organisation under which the responsibility of organising the transport service in a certain area is placed.",
          "fields": [
            {
              "name": "id",
              "description": "Authority id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "url",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "timezone",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "lang",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "phone",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "fareUrl",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "lines",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Line"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "Get all situations active for the authority.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "Line",
          "description": "A group of routes which is generally known to the public by a similar name or number",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "authority",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Authority"
              },
              "isDeprecated": false
            },
            {
              "name": "operator",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Operator"
              },
              "isDeprecated": false
            },
            {
              "name": "organisation",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Organisation"
              },
              "isDeprecated": true,
              "deprecationReason": "Use 'authority' instead."
            },
            {
              "name": "publicCode",
              "description": "Publicly announced code for line, differentiating it from other lines for the same operator.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "transportMode",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "TransportMode"
              },
              "isDeprecated": false
            },
            {
              "name": "transportSubmode",
              "description": "NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "TransportSubmode"
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "url",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "presentation",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Presentation"
              },
              "isDeprecated": false
            },
            {
              "name": "bikesAllowed",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "BikesAllowed"
              },
              "isDeprecated": false
            },
            {
              "name": "journeyPatterns",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "JourneyPattern"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quays",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Quay"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourneys",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ServiceJourney"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "notices",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Notice"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "Get all situations active for the line.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "flexibleLineType",
              "description": "Type of flexible line, or null if line is not flexible.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "bookingArrangements",
              "description": "Booking arrangements for flexible line.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "BookingArrangement"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "Presentation",
          "description": "Types describing common presentation properties",
          "fields": [
            {
              "name": "colour",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "textColour",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "BikesAllowed",
          "enumValues": [
            {
              "name": "noInformation",
              "description": "There is no bike information for the trip.",
              "isDeprecated": false
            },
            {
              "name": "allowed",
              "description": "The vehicle being used on this particular trip can accommodate at least one bicycle.",
              "isDeprecated": false
            },
            {
              "name": "notAllowed",
              "description": "No bicycles are allowed on this trip.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "JourneyPattern",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "line",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Line"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "directionType",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "DirectionType"
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "destinationDisplay",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "DestinationDisplay"
              },
              "isDeprecated": true,
              "deprecationReason": "Get destinationDisplay from estimatedCall or timetabledPassingTime instead. DestinationDisplay from JourneyPattern is not correct according to model, will give misleading results in some cases and will be removed!"
            },
            {
              "name": "serviceJourneys",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "ServiceJourney"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourneysForDate",
              "description": "List of service journeys for the journey pattern for a given date",
              "args": [
                {
                  "name": "date",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Date"
                  }
                }
              ],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "ServiceJourney"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "quays",
              "description": "Quays visited by service journeys for this journey patterns",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "Quay"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "pointsOnLink",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "PointsOnLink"
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "Get all situations active for the journey pattern.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "notices",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Notice"
                  }
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "DirectionType",
          "enumValues": [
            {
              "name": "unknown",
              "isDeprecated": false
            },
            {
              "name": "outbound",
              "isDeprecated": false
            },
            {
              "name": "inbound",
              "isDeprecated": false
            },
            {
              "name": "clockwise",
              "isDeprecated": false
            },
            {
              "name": "anticlockwise",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "DestinationDisplay",
          "description": "An advertised destination of a specific journey pattern, usually displayed on a head sign or at other on-board locations.",
          "fields": [
            {
              "name": "frontText",
              "description": "Name of destination to show on front of vehicle.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "ServiceJourney",
          "description": "A planned vehicle journey with passengers.",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "line",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "Line"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "activeDates",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Date"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "transportSubmode",
              "description": "The transport submode of the journey, if different from lines transport submode. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "TransportSubmode"
              },
              "isDeprecated": false
            },
            {
              "name": "publicCode",
              "description": "Publicly announced code for service journey, differentiating it from other service journeys for the same line.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "privateCode",
              "description": "For internal use by operators.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "linePublicCode",
              "description": "Publicly announced code for line, differentiating it from other lines for the same operator.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": true,
              "deprecationReason": "Use line.publicCode instead."
            },
            {
              "name": "operator",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Operator"
              },
              "isDeprecated": false
            },
            {
              "name": "directionType",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "DirectionType"
              },
              "isDeprecated": false
            },
            {
              "name": "wheelchairAccessible",
              "description": "Whether service journey is accessible with wheelchair.",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "WheelchairBoarding"
              },
              "isDeprecated": false
            },
            {
              "name": "bikesAllowed",
              "description": "Whether bikes are allowed on service journey.",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "BikesAllowed"
              },
              "isDeprecated": false
            },
            {
              "name": "journeyPattern",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "JourneyPattern"
              },
              "isDeprecated": false
            },
            {
              "name": "quays",
              "description": "Quays visited by service journey",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "Quay"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "passingTimes",
              "description": "Returns scheduled passing times only - without realtime-updates, for realtime-data use 'estimatedCalls'",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "TimetabledPassingTime"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "estimatedCalls",
              "description": "Returns scheduled passingTimes for this ServiceJourney for a given date, updated with realtime-updates (if available). NB! This takes a date as argument (default=today) and returns estimatedCalls for that date and should only be used if the date is known when creating the request. For fetching estimatedCalls for a given trip.leg, use leg.serviceJourneyEstimatedCalls instead.",
              "args": [
                {
                  "name": "date",
                  "description": "Date to get estimated calls for. Defaults to today.",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Date"
                  }
                }
              ],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "EstimatedCall"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "pointsOnLink",
              "description": "Detailed path travelled by service journey.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "PointsOnLink"
              },
              "isDeprecated": false
            },
            {
              "name": "notices",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Notice"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "Get all situations active for the service journey.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "bookingArrangements",
              "description": "Booking arrangements for flexible services.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "BookingArrangement"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "SCALAR",
          "name": "Date",
          "description": "Local date using the ISO 8601 format: `YYYY-MM-DD`. Example: `2020-05-17`."
        },
        {
          "kind": "OBJECT",
          "name": "TimetabledPassingTime",
          "description": "Scheduled passing times. These are not affected by real time updates.",
          "fields": [
            {
              "name": "quay",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Quay"
              },
              "isDeprecated": false
            },
            {
              "name": "arrival",
              "description": "Scheduled time of arrival at quay",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "TimeAndDayOffset"
              },
              "isDeprecated": false
            },
            {
              "name": "departure",
              "description": "Scheduled time of departure from quay",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "TimeAndDayOffset"
              },
              "isDeprecated": false
            },
            {
              "name": "timingPoint",
              "description": "Whether this is a timing point or not. Boarding and alighting is not allowed at timing points.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "forBoarding",
              "description": "Whether vehicle may be boarded at quay.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "forAlighting",
              "description": "Whether vehicle may be alighted at quay.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "requestStop",
              "description": "Whether vehicle will only stop on request.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourney",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "ServiceJourney"
              },
              "isDeprecated": false
            },
            {
              "name": "destinationDisplay",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "DestinationDisplay"
              },
              "isDeprecated": false
            },
            {
              "name": "notices",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Notice"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "bookingArrangements",
              "description": "Booking arrangements for flexible service. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "BookingArrangement"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "TimeAndDayOffset",
          "fields": [
            {
              "name": "time",
              "description": "Local time",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Time"
              },
              "isDeprecated": false
            },
            {
              "name": "dayOffset",
              "description": "Number of days offset from base line time",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "SCALAR",
          "name": "Time",
          "description": "Time using the format: `HH:MM:SS`. Example: `18:25:43`"
        },
        {
          "kind": "OBJECT",
          "name": "Notice",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "text",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "publicCode",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "EstimatedCall",
          "description": "List of visits to quays as part of vehicle journeys. Updated with real time information where available",
          "fields": [
            {
              "name": "quay",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "Quay"
              },
              "isDeprecated": false
            },
            {
              "name": "aimedArrivalTime",
              "description": "Scheduled time of arrival at quay. Not affected by read time updated",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "expectedArrivalTime",
              "description": "Expected time of arrival at quay. Updated with real time information if available. Will be null if an actualArrivalTime exists",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "actualArrivalTime",
              "description": "Actual time of arrival at quay. Updated from real time information if available. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "aimedDepartureTime",
              "description": "Scheduled time of departure from quay. Not affected by read time updated",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "expectedDepartureTime",
              "description": "Expected time of departure from quay. Updated with real time information if available. Will be null if an actualDepartureTime exists",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "actualDepartureTime",
              "description": "Actual time of departure from quay. Updated with real time information if available. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "DateTime"
              },
              "isDeprecated": false
            },
            {
              "name": "aimedArrival",
              "description": "Scheduled time of arrival at quay. Not affected by read time updated",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "TimeAndDayOffset"
              },
              "isDeprecated": true,
              "deprecationReason": "Use aimedArrivalTime"
            },
            {
              "name": "expectedArrival",
              "description": "Expected time of arrival at quay. Updated with real time information if available",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "TimeAndDayOffset"
              },
              "isDeprecated": true,
              "deprecationReason": "Use expectedArrivalTime"
            },
            {
              "name": "aimedDeparture",
              "description": "Scheduled time of departure from quay. Not affected by read time updated",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "TimeAndDayOffset"
              },
              "isDeprecated": true,
              "deprecationReason": "Use aimedDepartureTime"
            },
            {
              "name": "expectedDeparture",
              "description": "Expected time of departure from quay. Updated with real time information if available",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "TimeAndDayOffset"
              },
              "isDeprecated": true,
              "deprecationReason": "Use expectedDepartureTime"
            },
            {
              "name": "timingPoint",
              "description": "Whether this is a timing point or not. Boarding and alighting is not allowed at timing points.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "realtime",
              "description": "Whether this call has been updated with real time information.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "predictionInaccurate",
              "description": "Whether the updated estimates are expected to be inaccurate. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "realtimeState",
              "args": [],
              "type": {
                "kind": "ENUM",
                "name": "RealtimeState"
              },
              "isDeprecated": false
            },
            {
              "name": "forBoarding",
              "description": "Whether vehicle may be boarded at quay.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "forAlighting",
              "description": "Whether vehicle may be alighted at quay.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "requestStop",
              "description": "Whether vehicle will only stop on request.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "cancellation",
              "description": "Whether stop is cancellation. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "date",
              "description": "The date the estimated call is valid for.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Date"
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourney",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "ServiceJourney"
              },
              "isDeprecated": false
            },
            {
              "name": "destinationDisplay",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "DestinationDisplay"
              },
              "isDeprecated": false
            },
            {
              "name": "notices",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Notice"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "Get all relevant situations for this EstimatedCall.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "bookingArrangements",
              "description": "Booking arrangements for flexible service. NOT IMPLEMENTED",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "BookingArrangement"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "RealtimeState",
          "enumValues": [
            {
              "name": "scheduled",
              "description": "The service journey information comes from the regular time table, i.e. no real-time update has been applied.",
              "isDeprecated": false
            },
            {
              "name": "updated",
              "description": "The service journey information has been updated, but the journey pattern stayed the same as the journey pattern of the scheduled service journey.",
              "isDeprecated": false
            },
            {
              "name": "canceled",
              "description": "The service journey has been canceled by a real-time update.",
              "isDeprecated": false
            },
            {
              "name": "Added",
              "description": "The service journey has been added using a real-time update, i.e. the service journey was not present in the regular time table.",
              "isDeprecated": false
            },
            {
              "name": "modified",
              "description": "The service journey information has been updated and resulted in a different journey pattern compared to the journey pattern of the scheduled service journey.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "Operator",
          "description": "Organisation providing public transport services.",
          "fields": [
            {
              "name": "id",
              "description": "Operator id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "url",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "phone",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "lines",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Line"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "serviceJourney",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ServiceJourney"
                  }
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "Organisation",
          "description": "Deprecated! Replaced by authority and operator.",
          "fields": [
            {
              "name": "id",
              "description": "Organisation id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "url",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "timezone",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "lang",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "phone",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "fareUrl",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "lines",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "Line"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "situations",
              "description": "Get all situations active for the organisation.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "PtSituationElement"
                  }
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "BikeRentalStation",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "bikesAvailable",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "spacesAvailable",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "realtimeOccupancyAvailable",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "allowDropoff",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "networks",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "String"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "longitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "latitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": [
            {
              "kind": "INTERFACE",
              "name": "PlaceInterface"
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "BikePark",
          "fields": [
            {
              "name": "id",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "ID"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "spacesAvailable",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "realtime",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "longitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "latitude",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": [
            {
              "kind": "INTERFACE",
              "name": "PlaceInterface"
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "RoutingParameters",
          "description": "The default parameters used in travel searches.",
          "fields": [
            {
              "name": "walkSpeed",
              "description": "Max walk speed along streets, in meters per second",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeSpeed",
              "description": "Max bike speed along streets, in meters per second",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "carSpeed",
              "description": "Max car speed along streets, in meters per second",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "maxWalkDistance",
              "description": "The maximum distance (in meters) the user is willing to walk for access/egress legs.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "maxTransferWalkDistance",
              "description": "The maximum distance (in meters) the user is willing to walk for transfer legs.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "maxPreTransitTime",
              "description": "The maximum time (in seconds) of pre-transit travel when using drive-to-transit (park and ride or kiss and ride).",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "wheelChairAccessible",
              "description": "Whether the trip must be wheelchair accessible.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "numItineraries",
              "description": "The maximum number of itineraries to return.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "maxSlope",
              "description": "The maximum slope of streets for wheelchair trips.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "showIntermediateStops",
              "description": "Whether the planner should return intermediate stops lists for transit legs.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "transferPenalty",
              "description": "An extra penalty added on transfers (i.e. all boardings except the first one).",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "walkReluctance",
              "description": "A multiplier for how bad walking is, compared to being in transit for equal lengths of time.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "stairsReluctance",
              "description": "Used instead of walkReluctance for stairs.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "turnReluctance",
              "description": "Multiplicative factor on expected turning time.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "elevatorBoardTime",
              "description": "How long does it take to get on an elevator, on average.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "elevatorBoardCost",
              "description": "What is the cost of boarding a elevator?",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "elevatorHopTime",
              "description": "How long does it take to advance one floor on an elevator?",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "elevatorHopCost",
              "description": "What is the cost of travelling one floor on an elevator?",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeRentalPickupTime",
              "description": "Time to rent a bike.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeRentalPickupCost",
              "description": "Cost to rent a bike.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeRentalDropOffTime",
              "description": "Time to drop-off a rented bike.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeRentalDropOffCost",
              "description": "Cost to drop-off a rented bike.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeParkTime",
              "description": "Time to park a bike.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeParkCost",
              "description": "Cost to park a bike.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "carDropOffTime",
              "description": "Time to park a car in a park and ride, w/o taking into account driving and walking cost.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "waitReluctance",
              "description": "How much worse is waiting for a transit vehicle than being on a transit vehicle, as a multiplier.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "waitAtBeginningFactor",
              "description": "How much less bad is waiting at the beginning of the trip (replaces waitReluctance on the first boarding).",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "walkBoardCost",
              "description": "This prevents unnecessary transfers by adding a cost for boarding a vehicle.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeBoardCost",
              "description": "Separate cost for boarding a vehicle with a bicycle, which is more difficult than on foot.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "otherThanPreferredRoutesPenalty",
              "description": "Penalty added for using every route that is not preferred if user set any route as preferred. We return number of seconds that we are willing to wait for preferred route.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "transferSlack",
              "description": "A global minimum transfer time (in seconds) that specifies the minimum amount of time that must pass between exiting one transit vehicle and boarding another.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "boardSlackDefault",
              "description": "The boardSlack is the minimum extra time to board a public transport vehicle. This is the same as the 'minimumTransferTime', except that this also apply to to the first transit leg in the trip. This is the default value used, if not overridden by the 'boardSlackList'.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "boardSlackList",
              "description": "List of boardSlack for a given set of modes.",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "TransportModeSlackType"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "alightSlackDefault",
              "description": "The alightSlack is the minimum extra time after exiting a public transport vehicle. This is the default value used, if not overridden by the 'alightSlackList'.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "alightSlackList",
              "description": "List of alightSlack for a given set of modes.",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "TransportModeSlackType"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "maxTransfers",
              "description": "Maximum number of transfers returned in a trip plan.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Int"
              },
              "isDeprecated": false
            },
            {
              "name": "reverseOptimizeOnTheFly",
              "description": "DEPRECATED - NOT IN USE IN OTP2.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "compactLegsByReversedSearch",
              "description": "DEPRECATED - NOT IN USE IN OTP2.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "carDecelerationSpeed",
              "description": "The deceleration speed of an automobile, in meters per second per second.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "carAccelerationSpeed",
              "description": "The acceleration speed of an automobile, in meters per second per second.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Float"
              },
              "isDeprecated": false
            },
            {
              "name": "ignoreRealTimeUpdates",
              "description": "When true, realtime updates are ignored during this search.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "disableRemainingWeightHeuristic",
              "description": "If true, the remaining weight heuristic is disabled.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "allowBikeRental",
              "description": "",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "bikeParkAndRide",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "parkAndRide",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "kissAndRide",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "debugItineraryFilter",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "onlyTransitTrips",
              "description": "Accept only paths that use transit (no street-only paths).",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "disableAlertFiltering",
              "description": "Option to disable the default filtering of GTFS-RT alerts by time.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            },
            {
              "name": "geoIdElevation",
              "description": "Whether to apply the ellipsoid->geoid offset to all elevations in the response.",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "TransportModeSlackType",
          "description": "Used to specify board and alight slack for a given modes.",
          "fields": [
            {
              "name": "slack",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Int"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "modes",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "ENUM",
                      "name": "TransportMode"
                    }
                  }
                }
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "Severity",
          "enumValues": [
            {
              "name": "noImpact",
              "description": "Situation has no impact on trips.",
              "isDeprecated": false
            },
            {
              "name": "slight",
              "description": "Situation has a small impact on trips.",
              "isDeprecated": false
            },
            {
              "name": "normal",
              "description": "Situation has an impact on trips (default).",
              "isDeprecated": false
            },
            {
              "name": "severe",
              "description": "Situation has a severe impact on trips.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "__Schema",
          "description": "A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.",
          "fields": [
            {
              "name": "types",
              "description": "A list of all types supported by this server.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "__Type"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "queryType",
              "description": "The type that query operations will be rooted at.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "__Type"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "mutationType",
              "description": "If this server supports mutation, the type that mutation operations will be rooted at.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "__Type"
              },
              "isDeprecated": false
            },
            {
              "name": "directives",
              "description": "'A list of all directives supported by this server.",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "__Directive"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "subscriptionType",
              "description": "'If this server support subscription, the type that subscription operations will be rooted at.",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "__Type"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "__Type",
          "fields": [
            {
              "name": "kind",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "ENUM",
                  "name": "__TypeKind"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "fields",
              "args": [
                {
                  "name": "includeDeprecated",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__Field"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "interfaces",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__Type"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "possibleTypes",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__Type"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "enumValues",
              "args": [
                {
                  "name": "includeDeprecated",
                  "type": {
                    "kind": "SCALAR",
                    "name": "Boolean"
                  },
                  "defaultValue": "false"
                }
              ],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__EnumValue"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "inputFields",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "__InputValue"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "ofType",
              "args": [],
              "type": {
                "kind": "OBJECT",
                "name": "__Type"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "__TypeKind",
          "description": "An enum describing what kind of type a given __Type is",
          "enumValues": [
            {
              "name": "SCALAR",
              "description": "Indicates this type is a scalar.",
              "isDeprecated": false
            },
            {
              "name": "OBJECT",
              "description": "Indicates this type is an object. `fields` and `interfaces` are valid fields.",
              "isDeprecated": false
            },
            {
              "name": "INTERFACE",
              "description": "Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.",
              "isDeprecated": false
            },
            {
              "name": "UNION",
              "description": "Indicates this type is a union. `possibleTypes` is a valid field.",
              "isDeprecated": false
            },
            {
              "name": "ENUM",
              "description": "Indicates this type is an enum. `enumValues` is a valid field.",
              "isDeprecated": false
            },
            {
              "name": "INPUT_OBJECT",
              "description": "Indicates this type is an input object. `inputFields` is a valid field.",
              "isDeprecated": false
            },
            {
              "name": "LIST",
              "description": "Indicates this type is a list. `ofType` is a valid field.",
              "isDeprecated": false
            },
            {
              "name": "NON_NULL",
              "description": "Indicates this type is a non-null. `ofType` is a valid field.",
              "isDeprecated": false
            }
          ]
        },
        {
          "kind": "OBJECT",
          "name": "__Field",
          "fields": [
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "args",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "__InputValue"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "type",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "__Type"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "isDeprecated",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Boolean"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "deprecationReason",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "__InputValue",
          "fields": [
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "type",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "OBJECT",
                  "name": "__Type"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "defaultValue",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "__EnumValue",
          "fields": [
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "String"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "isDeprecated",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Boolean"
                }
              },
              "isDeprecated": false
            },
            {
              "name": "deprecationReason",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            }
          ],
          "interfaces": []
        },
        {
          "kind": "OBJECT",
          "name": "__Directive",
          "fields": [
            {
              "name": "name",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "description",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "String"
              },
              "isDeprecated": false
            },
            {
              "name": "locations",
              "args": [],
              "type": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "ENUM",
                    "name": "__DirectiveLocation"
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "args",
              "args": [],
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "OBJECT",
                      "name": "__InputValue"
                    }
                  }
                }
              },
              "isDeprecated": false
            },
            {
              "name": "onOperation",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": true,
              "deprecationReason": "Use `locations`."
            },
            {
              "name": "onFragment",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": true,
              "deprecationReason": "Use `locations`."
            },
            {
              "name": "onField",
              "args": [],
              "type": {
                "kind": "SCALAR",
                "name": "Boolean"
              },
              "isDeprecated": true,
              "deprecationReason": "Use `locations`."
            }
          ],
          "interfaces": []
        },
        {
          "kind": "ENUM",
          "name": "__DirectiveLocation",
          "description": "An enum describing valid locations where a directive can be placed",
          "enumValues": [
            {
              "name": "QUERY",
              "description": "Indicates the directive is valid on queries.",
              "isDeprecated": false
            },
            {
              "name": "MUTATION",
              "description": "Indicates the directive is valid on mutations.",
              "isDeprecated": false
            },
            {
              "name": "FIELD",
              "description": "Indicates the directive is valid on fields.",
              "isDeprecated": false
            },
            {
              "name": "FRAGMENT_DEFINITION",
              "description": "Indicates the directive is valid on fragment definitions.",
              "isDeprecated": false
            },
            {
              "name": "FRAGMENT_SPREAD",
              "description": "Indicates the directive is valid on fragment spreads.",
              "isDeprecated": false
            },
            {
              "name": "INLINE_FRAGMENT",
              "description": "Indicates the directive is valid on inline fragments.",
              "isDeprecated": false
            },
            {
              "name": "SCHEMA",
              "description": "Indicates the directive is valid on a schema SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "SCALAR",
              "description": "Indicates the directive is valid on a scalar SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "OBJECT",
              "description": "Indicates the directive is valid on an object SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "FIELD_DEFINITION",
              "description": "Indicates the directive is valid on a field SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "ARGUMENT_DEFINITION",
              "description": "Indicates the directive is valid on a field argument SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "INTERFACE",
              "description": "Indicates the directive is valid on an interface SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "UNION",
              "description": "Indicates the directive is valid on an union SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "ENUM",
              "description": "Indicates the directive is valid on an enum SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "ENUM_VALUE",
              "description": "Indicates the directive is valid on an enum value SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "INPUT_OBJECT",
              "description": "Indicates the directive is valid on an input object SDL definition.",
              "isDeprecated": false
            },
            {
              "name": "INPUT_FIELD_DEFINITION",
              "description": "Indicates the directive is valid on an input object field SDL definition.",
              "isDeprecated": false
            }
          ]
        }
      ],
      "directives": [
        {
          "name": "include",
          "description": "Directs the executor to include this field or fragment only when the `if` argument is true",
          "locations": [
            "FIELD",
            "FRAGMENT_SPREAD",
            "INLINE_FRAGMENT"
          ],
          "args": [
            {
              "name": "if",
              "description": "Included when true.",
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Boolean"
                }
              }
            }
          ]
        },
        {
          "name": "skip",
          "description": "Directs the executor to skip this field or fragment when the `if`'argument is true.",
          "locations": [
            "FIELD",
            "FRAGMENT_SPREAD",
            "INLINE_FRAGMENT"
          ],
          "args": [
            {
              "name": "if",
              "description": "Skipped when true.",
              "type": {
                "kind": "NON_NULL",
                "ofType": {
                  "kind": "SCALAR",
                  "name": "Boolean"
                }
              }
            }
          ]
        },
        {
          "name": "defer",
          "description": "This directive allows results to be deferred during execution",
          "locations": [
            "FIELD"
          ],
          "args": []
        }
      ]
    }
  }
}